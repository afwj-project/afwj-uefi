#pragma once

#include "efibase.h"
#include "efiver.h"

#define EFI_FILE_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_PROTOCOL_REVISION2 0x00020000
#define EFI_FILE_PROTOCOL_LATEST_REVISION EFI_FILE_PROTOCOL_REVISION2
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID { 0x0964E5B22, 0x6459, 0x11D2, { 0x8E, 0x39, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION 0x00010000
#define EFI_LOAD_FILE_PROTOCOL_GUID { 0x56EC3091, 0x954C, 0x11D2, { 0x8e, 0x3f, 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b } }

typedef struct _EFI_FILE_IO_TOKEN {
	EFI_EVENT Event;
	EFI_STATUS Status;
	UINTN BufferSize;
	VOID* Buffer;
} EFI_FILE_IO_TOKEN;

typedef struct _EFI_FILE_PROTOCOL EFI_FILE_PROTOCOL;
typedef struct _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;
typedef struct _EFI_LOAD_FILE_PROTOCOL EFI_LOAD_FILE_PROTOCOL;

typedef EFI_STATUS(*EFI_FILE_OPEN)(
	IN EFI_FILE_PROTOCOL* This, OUT EFI_FILE_PROTOCOL** NewHandle,
	IN CHAR16* FileName, IN UINT64 OpenMode, IN UINT64 Attributes);

typedef EFI_STATUS(*EFI_FILE_CLOSE)(IN EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS(*EFI_FILE_DELETE)(IN EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS(*EFI_FILE_FLUSH)(IN EFI_FILE_PROTOCOL* This);

typedef EFI_STATUS(*EFI_FILE_READ)(
	IN EFI_FILE_PROTOCOL* This, IN OUT UINTN* BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_FILE_WRITE)(
	IN EFI_FILE_PROTOCOL* This, IN OUT UINTN* BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_LOAD_FILE)(
	IN EFI_LOAD_FILE_PROTOCOL* This, IN EFI_DEVICE_PATH_PROTOCOL* FilePath,
	IN BOOLEAN BootPolicy, IN OUT UINTN* BufferSize, IN VOID* Buffer OPTIONAL);

typedef EFI_STATUS(*EFI_FILE_OPEN_EX)(
	IN EFI_FILE_PROTOCOL* This, OUT EFI_FILE_PROTOCOL** NewHandle, IN CHAR16* FileName,
	IN UINT64 OpenMode, IN UINT64 Attributes, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_READ_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_WRITE_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_FLUSH_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_SET_POSITION)(
	IN EFI_FILE_PROTOCOL* This, IN UINT64 Position);

typedef EFI_STATUS(*EFI_FILE_GET_POSITION)(
	IN EFI_FILE_PROTOCOL* This, OUT UINT64* Position);

typedef EFI_STATUS(*EFI_FILE_GET_INFO)(
	IN EFI_FILE_PROTOCOL* This, IN EFI_GUID* InformationType,
	IN OUT UINTN* BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_FILE_SET_INFO)(
	IN EFI_FILE_PROTOCOL* This, IN EFI_GUID* InformationType,
	IN UINTN BufferSize, IN VOID* Buffer);

struct _EFI_FILE_PROTOCOL {
	UINT64 Revision;
	EFI_FILE_OPEN Open;
	EFI_FILE_CLOSE Close;
	EFI_FILE_DELETE Delete;
	EFI_FILE_READ Read;
	EFI_FILE_WRITE Write;
	EFI_FILE_GET_POSITION GetPosition;
	EFI_FILE_SET_POSITION SetPosition;
	EFI_FILE_GET_INFO GetInfo;
	EFI_FILE_SET_INFO SetInfo;
	EFI_FILE_FLUSH Flush;
	EFI_FILE_OPEN_EX OpenEx;
	EFI_FILE_READ_EX ReadEx;
	EFI_FILE_WRITE_EX WriteEx;
	EFI_FILE_FLUSH_EX FlushEx;
};

struct _EFI_LOAD_FILE_PROTOCOL {
	EFI_LOAD_FILE LoadFile;
};
