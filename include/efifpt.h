#pragma once

#include "efibase.h"
#include "efiver.h"

#define EFI_FILE_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_PROTOCOL_REVISION2 0x00020000
#define EFI_FILE_PROTOCOL_LATEST_REVISION EFI_FILE_PROTOCOL_REVISION2
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_GUID { 0x0964E5B22, 0x6459, 0x11D2, { 0x8E, 0x39, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_REVISION 0x00010000
#define EFI_FILE_SYSTEM_INFO_ID { 0x09576E93, 0x6D3F, 0x11D2, { 0x8E, 0x39, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_FILE_SYSTEM_VOLUME_LABEL_ID { 0xDB47D7D3, 0xFE81, 0x11D3, { 0x9A, 0x35, 0x00, 0x90, 0x27, 0x3F, 0xC1, 0x4D } }
#define EFI_LOAD_FILE_PROTOCOL_GUID { 0x56EC3091, 0x954C, 0x11D2, { 0x8E, 0x3F, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_LOAD_FILE2_PROTOCOL_GUID { 0x4006C0C1, 0xFCB3, 0x403E, { 0x99, 0x6D, 0x4A, 0x6C, 0x87, 0x24, 0xE0, 0x6D } }
#define EFI_DISK_IO_PROTOCOL_GUID { 0xCE345171, 0xBA0B, 0x11D2, { 0x8E, 0x4F, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_DISK_IO_PROTOCOL_REVISION 0x00010000
#define EFI_DISK_IO2_PROTOCOL_GUID { 0x151C8EAE, 0x7F2C, 0x472C, { 0x9E, 0x54, 0x98, 0x28, 0x19, 0x4F, 0x6A, 0x88 } }
#define EFI_DISK_IO2_PROTOCOL_REVISION 0x00020000
#define EFI_BLOCK_IO_PROTOCOL_GUID { 0x964E5B21, 0x6459, 0x11D2, { 0x8E, 0x39, 0x00, 0xA0, 0xC9, 0x69, 0x72, 0x3B } }
#define EFI_BLOCK_IO_PROTOCOL_REVISION2 0x00020000
#define EFI_BLOCK_IO_PROTOCOL_REVISION3 ((EFI_BLOCK_IO_PROTOCOL_REVISION2) | 0x1F)
#define EFI_BLOCK_IO2_PROTOCOL_GUID { 0xA77B2472, 0xE282, 0x4E9F, { 0xA2, 0x45, 0xC2, 0xC0, 0xE2, 0x7B, 0xBC, 0xC1 } }

// TYPE: File I/O Extension Token
typedef struct {
	EFI_EVENT Event;
	EFI_STATUS Status;
	UINTN BufferSize;
	VOID* Buffer;
} EFI_FILE_IO_TOKEN;

// TYPE: Disk I/O Extension Token
typedef struct {
	EFI_EVENT Event;
	EFI_STATUS TransactionStatus;
} EFI_DISK_IO2_TOKEN;

// TYPE: Block I/O Extension Token
typedef struct {
	EFI_EVENT Event;
	EFI_STATUS TransactionStatus;
} EFI_BLOCK_IO2_TOKEN;

// TYPE: File System Information for UEFI
typedef struct {
	UINT64 Size;
	BOOLEAN ReadOnly;
	UINT64 VolumeSize;
	UINT64 FreeSpace;
	UINT32 BlockSize;
	CHAR16 VolumeLabel[1];
} EFI_FILE_SYSTEM_INFO;

// TYPE: File System Volume Label for UEFI
typedef struct {
	CHAR16 VolumeLabel[1];
} EFI_FILE_SYSTEM_VOLUME_LABEL;

typedef struct {
	UINT32 MediaId;
	BOOLEAN RemovableMedia;
	BOOLEAN MediaPresent;
	BOOLEAN LogicalPartition;
	BOOLEAN ReadOnly;
	BOOLEAN WriteCaching;
	UINT32 BlockSize;
	UINT32 IoAlign;
	EFI_LBA LastBlock;
	EFI_LBA LowestAlignedLba;
	UINT32 LogicalBlocksPerPhysicalBlock;
	UINT32 OptimalTransferLengthGranularity;
} EFI_BLOCK_IO_MEDIA;

typedef struct _EFI_FILE_PROTOCOL EFI_FILE_PROTOCOL;
typedef struct _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL EFI_SIMPLE_FILE_SYSTEM_PROTOCOL;
typedef struct _EFI_LOAD_FILE_PROTOCOL EFI_LOAD_FILE_PROTOCOL;
typedef EFI_LOAD_FILE_PROTOCOL EFI_LOAD_FILE2_PROTOCOL;
typedef struct _EFI_DISK_IO_PROTOCOL EFI_DISK_IO_PROTOCOL;
typedef struct _EFI_DISK_IO2_PROTOCOL EFI_DISK_IO2_PROTOCOL;
typedef struct _EFI_BLOCK_IO_PROTOCOL EFI_BLOCK_IO_PROTOCOL;
typedef struct _EFI_BLOCK_IO2_PROTOCOL EFI_BLOCK_IO2_PROTOCOL;

typedef EFI_STATUS(*EFI_FILE_OPEN)(
	IN EFI_FILE_PROTOCOL* This, OUT EFI_FILE_PROTOCOL** NewHandle,
	IN CHAR16* FileName, IN UINT64 OpenMode, IN UINT64 Attributes);

typedef EFI_STATUS(*EFI_FILE_CLOSE)(IN EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS(*EFI_FILE_DELETE)(IN EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS(*EFI_FILE_FLUSH)(IN EFI_FILE_PROTOCOL* This);
typedef EFI_STATUS(*EFI_DISK_CANCEL_EX)(IN EFI_DISK_IO2_PROTOCOL* This);
typedef EFI_STATUS(*EFI_BLOCK_FLUSH)(IN EFI_BLOCK_IO_PROTOCOL* This);

typedef EFI_STATUS(*EFI_FILE_READ)(
	IN EFI_FILE_PROTOCOL* This, IN OUT UINTN* BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_FILE_WRITE)(
	IN EFI_FILE_PROTOCOL* This, IN OUT UINTN* BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_LOAD_FILE)(
	IN EFI_LOAD_FILE_PROTOCOL* This, IN EFI_DEVICE_PATH_PROTOCOL* FilePath,
	IN BOOLEAN BootPolicy, IN OUT UINTN* BufferSize, IN VOID* Buffer OPTIONAL);

typedef EFI_STATUS(*EFI_FILE_OPEN_EX)(
	IN EFI_FILE_PROTOCOL* This, OUT EFI_FILE_PROTOCOL** NewHandle, IN CHAR16* FileName,
	IN UINT64 OpenMode, IN UINT64 Attributes, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_READ_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_WRITE_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_FLUSH_EX)(
	IN EFI_FILE_PROTOCOL* This, IN OUT EFI_FILE_IO_TOKEN* Token);

typedef EFI_STATUS(*EFI_FILE_SET_POSITION)(
	IN EFI_FILE_PROTOCOL* This, IN UINT64 Position);

typedef EFI_STATUS(*EFI_FILE_GET_POSITION)(
	IN EFI_FILE_PROTOCOL* This, OUT UINT64* Position);

typedef EFI_STATUS(*EFI_FILE_GET_INFO)(
	IN EFI_FILE_PROTOCOL* This, IN EFI_GUID* InformationType,
	IN OUT UINTN* BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_FILE_SET_INFO)(
	IN EFI_FILE_PROTOCOL* This, IN EFI_GUID* InformationType,
	IN UINTN BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME)(
	IN EFI_SIMPLE_FILE_SYSTEM_PROTOCOL* This, OUT EFI_FILE_PROTOCOL** Root);

typedef EFI_STATUS(*EFI_DISK_READ)(
	IN EFI_DISK_IO_PROTOCOL* This, IN UINT32 MediaId,
	IN UINT64 Offset, IN UINTN BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_DISK_WRITE)(
	IN EFI_DISK_IO_PROTOCOL* This, IN UINT32 MediaId,
	IN UINT64 Offset, IN UINTN BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_DISK_READ_EX)(
	IN EFI_DISK_IO2_PROTOCOL* This, IN UINT32 MediaId, IN UINT64 Offset,
	IN OUT EFI_DISK_IO2_TOKEN* Token, IN UINTN BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_DISK_WRITE_EX)(
	IN EFI_DISK_IO2_PROTOCOL* This, IN UINT32 MediaId, IN UINT64 Offset,
	IN OUT EFI_DISK_IO2_TOKEN* Token, IN UINTN BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_DISK_FLUSH_EX)(
	IN EFI_DISK_IO2_PROTOCOL* This, IN OUT EFI_DISK_IO2_TOKEN* Token);

typedef EFI_STATUS(*EFI_BLOCK_RESET)(
	IN EFI_BLOCK_IO_PROTOCOL* This, IN BOOLEAN ExtendedVerification);

typedef EFI_STATUS(*EFI_BLOCK_READ)(
	IN EFI_BLOCK_IO_PROTOCOL* This, IN UINT32 MediaId,
	IN EFI_LBA LBA, IN UINTN BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_BLOCK_WRITE)(
	IN EFI_BLOCK_IO_PROTOCOL* This, IN UINT32 MediaId,
	IN EFI_LBA LBA, IN UINTN BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_BLOCK_RESET_EX)(
	IN EFI_BLOCK_IO2_PROTOCOL* This, IN BOOLEAN ExtendedVerification);

typedef EFI_STATUS(*EFI_BLOCK_READ_EX)(
	IN EFI_BLOCK_IO2_PROTOCOL* This, IN UINT32 MediaId, IN EFI_LBA LBA,
	IN OUT EFI_BLOCK_IO2_TOKEN* Token, IN UINTN BufferSize, OUT VOID* Buffer);

typedef EFI_STATUS(*EFI_BLOCK_WRITE_EX)(
	IN EFI_BLOCK_IO2_PROTOCOL* This, IN UINT32 MediaId, IN EFI_LBA LBA,
	IN OUT EFI_BLOCK_IO2_TOKEN* Token, IN UINTN BufferSize, IN VOID* Buffer);

typedef EFI_STATUS(*EFI_BLOCK_FLUSH_EX)(
	IN EFI_BLOCK_IO_PROTOCOL* This, IN OUT EFI_BLOCK_IO2_TOKEN* Token);

struct _EFI_FILE_PROTOCOL {
	UINT64 Revision;
	EFI_FILE_OPEN Open;
	EFI_FILE_CLOSE Close;
	EFI_FILE_DELETE Delete;
	EFI_FILE_READ Read;
	EFI_FILE_WRITE Write;
	EFI_FILE_GET_POSITION GetPosition;
	EFI_FILE_SET_POSITION SetPosition;
	EFI_FILE_GET_INFO GetInfo;
	EFI_FILE_SET_INFO SetInfo;
	EFI_FILE_FLUSH Flush;
	EFI_FILE_OPEN_EX OpenEx;
	EFI_FILE_READ_EX ReadEx;
	EFI_FILE_WRITE_EX WriteEx;
	EFI_FILE_FLUSH_EX FlushEx;
};

struct _EFI_LOAD_FILE_PROTOCOL {
	EFI_LOAD_FILE LoadFile;
};

struct _EFI_SIMPLE_FILE_SYSTEM_PROTOCOL {
	UINT64 Revision;
	EFI_SIMPLE_FILE_SYSTEM_PROTOCOL_OPEN_VOLUME OpenVolume;
};

struct _EFI_DISK_IO_PROTOCOL {
	UINT64 Revision;
	EFI_DISK_READ ReadDisk;
	EFI_DISK_WRITE WriteDisk;
};

struct _EFI_DISK_IO2_PROTOCOL {
	UINT64 Revision;
	EFI_DISK_CANCEL_EX Cancel;
	EFI_DISK_READ_EX ReadDiskEx;
	EFI_DISK_WRITE_EX WriteDiskEx;
	EFI_DISK_FLUSH_EX FlushDiskEx;
};

struct _EFI_BLOCK_IO_PROTOCOL {
	UINT64 Revision;
	EFI_BLOCK_IO_MEDIA* Media;
	EFI_BLOCK_RESET Reset;
	EFI_BLOCK_READ ReadBlocks;
	EFI_BLOCK_WRITE WriteBlocks;
	EFI_BLOCK_FLUSH FlushBlocks;
};

struct _EFI_BLOCK_IO2_PROTOCOL {
	EFI_BLOCK_IO_MEDIA* Media;
	EFI_BLOCK_RESET_EX Reset;
	EFI_BLOCK_READ_EX ReadBlocksEx;
	EFI_BLOCK_WRITE_EX WriteBlocksEx;
	EFI_BLOCK_FLUSH_EX FlushBlocksEx;
};
